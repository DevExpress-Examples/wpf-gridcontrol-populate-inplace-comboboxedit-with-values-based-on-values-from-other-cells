' Developer Express Code Central Example:
' How to use a combo box whose choices are different for each cell in the grid
' 
' There are two ways to accomplish this task: via filter criteria and by using a
' multibinding approach. Let me explain theses approaches in detail.
' 
' 1) Filter
' criteria
' The main idea is to dynamically construct a filter by using the
' selected value of the first column in the grid. So, items in the ComboBox editor
' will be filtered automatically according to the filter's value. In this case, it
' is necessary to create a converter (which implements the IValueConverter
' interface) in the code-behind file. 2) Multibinding approach.
' You can also
' resolve this problem by using the multibinding approach. Specify multiple
' bindings in a MultiBinding object and create a converter (which implements the
' IMultiValueConverter interface) to produce a final value for the binding target
' property based on values of those bindings.
' 
' You can find sample updates and versions for different programming languages here:
' http://www.devexpress.com/example=E2163
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3074
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Namespace FilterCombo.Properties

    <Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")>
    Friend NotInheritable Partial Class Settings
        Inherits Global.System.Configuration.ApplicationSettingsBase

        Private Shared defaultInstance As FilterCombo.Properties.Settings = CType((Global.System.Configuration.ApplicationSettingsBase.Synchronized(New FilterCombo.Properties.Settings())), FilterCombo.Properties.Settings)

        Public Shared ReadOnly Property [Default] As Settings
            Get
                Return FilterCombo.Properties.Settings.defaultInstance
            End Get
        End Property
    End Class
End Namespace
